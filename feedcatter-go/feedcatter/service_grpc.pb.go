// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: feedcatter/service.proto

package feedcatter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FeedcatterService_CreateFood_FullMethodName  = "/feedcatter.FeedcatterService/CreateFood"
	FeedcatterService_DeleteFood_FullMethodName  = "/feedcatter.FeedcatterService/DeleteFood"
	FeedcatterService_ListFoods_FullMethodName   = "/feedcatter.FeedcatterService/ListFoods"
	FeedcatterService_SuggestFood_FullMethodName = "/feedcatter.FeedcatterService/SuggestFood"
	FeedcatterService_FeedFood_FullMethodName    = "/feedcatter.FeedcatterService/FeedFood"
)

// FeedcatterServiceClient is the client API for FeedcatterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedcatterServiceClient interface {
	CreateFood(ctx context.Context, in *CreateFoodRequest, opts ...grpc.CallOption) (*CreateFoodResponse, error)
	DeleteFood(ctx context.Context, in *DeleteFoodRequest, opts ...grpc.CallOption) (*DeleteFoodResponse, error)
	ListFoods(ctx context.Context, in *ListFoodsRequest, opts ...grpc.CallOption) (*ListFoodsResponse, error)
	SuggestFood(ctx context.Context, in *SuggestFoodRequest, opts ...grpc.CallOption) (*SuggestFoodResponse, error)
	FeedFood(ctx context.Context, in *FeedFoodRequest, opts ...grpc.CallOption) (*FeedFoodResponse, error)
}

type feedcatterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedcatterServiceClient(cc grpc.ClientConnInterface) FeedcatterServiceClient {
	return &feedcatterServiceClient{cc}
}

func (c *feedcatterServiceClient) CreateFood(ctx context.Context, in *CreateFoodRequest, opts ...grpc.CallOption) (*CreateFoodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFoodResponse)
	err := c.cc.Invoke(ctx, FeedcatterService_CreateFood_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedcatterServiceClient) DeleteFood(ctx context.Context, in *DeleteFoodRequest, opts ...grpc.CallOption) (*DeleteFoodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFoodResponse)
	err := c.cc.Invoke(ctx, FeedcatterService_DeleteFood_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedcatterServiceClient) ListFoods(ctx context.Context, in *ListFoodsRequest, opts ...grpc.CallOption) (*ListFoodsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFoodsResponse)
	err := c.cc.Invoke(ctx, FeedcatterService_ListFoods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedcatterServiceClient) SuggestFood(ctx context.Context, in *SuggestFoodRequest, opts ...grpc.CallOption) (*SuggestFoodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuggestFoodResponse)
	err := c.cc.Invoke(ctx, FeedcatterService_SuggestFood_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedcatterServiceClient) FeedFood(ctx context.Context, in *FeedFoodRequest, opts ...grpc.CallOption) (*FeedFoodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedFoodResponse)
	err := c.cc.Invoke(ctx, FeedcatterService_FeedFood_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedcatterServiceServer is the server API for FeedcatterService service.
// All implementations must embed UnimplementedFeedcatterServiceServer
// for forward compatibility.
type FeedcatterServiceServer interface {
	CreateFood(context.Context, *CreateFoodRequest) (*CreateFoodResponse, error)
	DeleteFood(context.Context, *DeleteFoodRequest) (*DeleteFoodResponse, error)
	ListFoods(context.Context, *ListFoodsRequest) (*ListFoodsResponse, error)
	SuggestFood(context.Context, *SuggestFoodRequest) (*SuggestFoodResponse, error)
	FeedFood(context.Context, *FeedFoodRequest) (*FeedFoodResponse, error)
	mustEmbedUnimplementedFeedcatterServiceServer()
}

// UnimplementedFeedcatterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeedcatterServiceServer struct{}

func (UnimplementedFeedcatterServiceServer) CreateFood(context.Context, *CreateFoodRequest) (*CreateFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFood not implemented")
}
func (UnimplementedFeedcatterServiceServer) DeleteFood(context.Context, *DeleteFoodRequest) (*DeleteFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFood not implemented")
}
func (UnimplementedFeedcatterServiceServer) ListFoods(context.Context, *ListFoodsRequest) (*ListFoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFoods not implemented")
}
func (UnimplementedFeedcatterServiceServer) SuggestFood(context.Context, *SuggestFoodRequest) (*SuggestFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestFood not implemented")
}
func (UnimplementedFeedcatterServiceServer) FeedFood(context.Context, *FeedFoodRequest) (*FeedFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedFood not implemented")
}
func (UnimplementedFeedcatterServiceServer) mustEmbedUnimplementedFeedcatterServiceServer() {}
func (UnimplementedFeedcatterServiceServer) testEmbeddedByValue()                           {}

// UnsafeFeedcatterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedcatterServiceServer will
// result in compilation errors.
type UnsafeFeedcatterServiceServer interface {
	mustEmbedUnimplementedFeedcatterServiceServer()
}

func RegisterFeedcatterServiceServer(s grpc.ServiceRegistrar, srv FeedcatterServiceServer) {
	// If the following call pancis, it indicates UnimplementedFeedcatterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeedcatterService_ServiceDesc, srv)
}

func _FeedcatterService_CreateFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedcatterServiceServer).CreateFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedcatterService_CreateFood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedcatterServiceServer).CreateFood(ctx, req.(*CreateFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedcatterService_DeleteFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedcatterServiceServer).DeleteFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedcatterService_DeleteFood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedcatterServiceServer).DeleteFood(ctx, req.(*DeleteFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedcatterService_ListFoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedcatterServiceServer).ListFoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedcatterService_ListFoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedcatterServiceServer).ListFoods(ctx, req.(*ListFoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedcatterService_SuggestFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedcatterServiceServer).SuggestFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedcatterService_SuggestFood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedcatterServiceServer).SuggestFood(ctx, req.(*SuggestFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedcatterService_FeedFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedcatterServiceServer).FeedFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedcatterService_FeedFood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedcatterServiceServer).FeedFood(ctx, req.(*FeedFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedcatterService_ServiceDesc is the grpc.ServiceDesc for FeedcatterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedcatterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feedcatter.FeedcatterService",
	HandlerType: (*FeedcatterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFood",
			Handler:    _FeedcatterService_CreateFood_Handler,
		},
		{
			MethodName: "DeleteFood",
			Handler:    _FeedcatterService_DeleteFood_Handler,
		},
		{
			MethodName: "ListFoods",
			Handler:    _FeedcatterService_ListFoods_Handler,
		},
		{
			MethodName: "SuggestFood",
			Handler:    _FeedcatterService_SuggestFood_Handler,
		},
		{
			MethodName: "FeedFood",
			Handler:    _FeedcatterService_FeedFood_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feedcatter/service.proto",
}
